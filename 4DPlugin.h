/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.h
 #	source generated by 4D Plugin Wizard
 #	Project : cURL HTTP
 #	author : miyako
 #	2018/01/09
 #
 # --------------------------------------------------------------------------------*/

#include <stdio.h>
#include <time.h>

#include "curl.h"
#include "libjson.h"
#include "proxy.h"

#define CURLOPT_AUTOPROXY 8
#define CURLOPT_REQUEST 30
#define CURLOPT_RESPONSE 35

void json_wconv(const wchar_t *value, CUTF16String *u16);
void json_wconv(const wchar_t *value, CUTF8String *u8);
void json_wconv(const char *value, std::wstring &u32);
void json_push_back_s(JSONNODE *n, const char *value);
void json_stringify(JSONNODE *json, CUTF16String &t, BOOL pretty);
void json_set_s(JSONNODE *n, const char *value);
void json_set_s_for_key(JSONNODE *n, json_char *key, const char *value);
void json_set_b_for_key(JSONNODE *n, json_char *key, json_bool_t value);
void json_set_i_for_key(JSONNODE *n, json_char *key, json_int_t value);

#if VERSIONMAC
#define CPathString CUTF8String
#define CPathOpen fopen
#define CPathAppend "ab"
#define CPathCreate "wb"
#define CPathRead "rb"
#else
#include <Shlobj.h>
#define CPathString CUTF16String
#define CPathOpen _wfopen
#define CPathAppend L"ab"
#define CPathCreate L"wb"
#define CPathRead L"rb"
#endif

#if VERSIONMAC
typedef std::string absolute_path_t;
#define folder_separator '/'
#else
typedef std::wstring absolute_path_t;
#define folder_separator L'\\'
#endif

#if VERSIONMAC
typedef char path_t;
#else
typedef wchar_t path_t;
#endif

bool create_folder(path_t *absolute_path);
void create_parent_folder(path_t *absolute_path);

typedef struct
{
	
	C_BLOB *data;

	const path_t *path;
	size_t pos;
	curl_off_t size;
	
	BOOL use_path;
	
}http_ctx;

CURLcode curl_perform(CURLM *mcurl, CURL *curl, C_TEXT& Param3, C_TEXT& userInfo);

CURLoption json_get_curl_option_name(JSONNODE *n);

void json_get_curl_option_v(CURL *curl, CURLoption option, JSONNODE *n, struct curl_slist *list);
void json_get_curl_option_m(CURL *curl, CURLoption option, JSONNODE *n);
void json_get_curl_option_c(CURL *curl, CURLoption option, JSONNODE *n);
void json_get_curl_option_i(CURL *curl, CURLoption option, JSONNODE *n);
void json_get_curl_option_p(CURL *curl, CURLoption option, JSONNODE *n);
void json_get_curl_option_s(CURL *curl, CURLoption option, JSONNODE *n);
long json_get_curl_option_value(JSONNODE *n);

void curl_set_options(CURL *curl, C_TEXT& Param1, C_TEXT& userInfo,
											struct curl_slist *http_headers,
											struct curl_slist *http_proxy_headers,
											struct curl_slist *http_200_aliases,
											CPathString& request_path,
											CPathString& response_path);

void curl_get_info(CURL *curl, CUTF16String& json);

/*
void last_path_component(CUTF8String& path);
void remove_trailing_separator(CUTF8String& path);
void remove_trailing_separator(CUTF16String& path);
void curl_unescape_path(CURL *curl, CUTF8String& path);
 */

// --- HTTP
void cURL_HTTP_Request(sLONG_PTR *pResult, PackagePtr pParams);
